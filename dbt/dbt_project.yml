
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'doubtless'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'doubtless'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

vars:
  postgres_prob_agg_type: 'inmemory'
  # postgres_prob_agg_type: 'temptable'
  prune_method: 'none'

on-run-start:
  # Create pgbdd extension for postgres
  - '{{ create_pgbdd_extension() }}'
  # Create all UDFs
  - '{{ create_bdd_udf() }}'
  - '{{ create_bdd_to_string_udf() }}'
  - '{{ create_bdd_and_udf() }}'
  - '{{ create_bdd_or_udf() }}'
  - '{{ create_bdd_not_udf() }}'
  - '{{ create_bdd_prob_udf() }}'
  - '{{ create_bdd_equiv_udf() }}'
  - '{{ create_bdd_prune_and_udf() }}'
  - '{{ create_prob_dict_udf() }}'
  - '{{ create_prob_dict_to_string_udf() }}'
  # Create all UDAFs
  - '{{ create_bdd_agg_and_udaf() }}'
  - '{{ create_bdd_agg_or_udaf() }}'
  - '{{ create_consume_prob_agg_functions() }}'
  - '{{ create_prob_count_udaf() }}'
  - '{{ create_prob_sum_udaf() }}'
  - '{{ create_prob_min_udaf() }}'
  - '{{ create_prob_max_udaf() }}'
  - '{{ create_prob_avg_udaf() }}'
  # Ingest the raw data
  - '{{ create_raw_schema() }}'
  - '{{ ingest_wdc_data() }}'

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  doubtless:
    staging:
      +schema: staging
      +materialized: view
      +file_format: parquet
      +post-hook: '{{ refresh_spark_table() }}'
    intermediate:
      +schema: intermediate
      +materialized: view
      +file_format: parquet
    experiments:
      +schema: experiments
      +materialized: table
      +file_format: parquet
      +post_hook: '{{ refresh_spark_table() }}'
